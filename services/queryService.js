const bangSach = require("../models/sach.model");
const bangLoaiSach = require("../models/loaisach.model");
const bangTacGia = require("../models/tacgia.model");
const bangNXB = require("../models/nhaxuatban.model");
const bangViTri = require("../models/vitri.model");
const bangSachCopy = require("../models/sachCopy.model");
const { patch } = require("../routes/chatbot");

class QueryService {
  // T√¨m ki·∫øm s√°ch theo t√™n
  async searchBooksByName(tenSach) {
    try {
      const books = await bangSach
        .find({
          TenSach: { $regex: tenSach, $options: "i" },
        })
        .select("-image")
        .populate("TacGia", "TenTG")
        .populate("MaLoai", "TenLoai")
        .limit(10);
      return books;
    } catch (error) {
      throw new Error(`L·ªói t√¨m ki·∫øm s√°ch: ${error.message}`);
    }
  }

  // T√¨m ki·∫øm s√°ch theo t√°c gi·∫£
  async searchBooksByAuthor(tenTacGia) {
    try {
      const authors = await bangTacGia.find({
        TenTG: { $regex: tenTacGia, $options: "i" },
      });

      if (authors.length === 0) {
        return [];
      }

      const authorIds = authors.map((author) => author._id);
      const books = await bangSach
        .find({
          TacGia: { $in: authorIds },
        })
        .select("-image")
        .populate("TacGia", "TenTG")
        .populate("MaLoai", "TenLoai")
        .limit(10);

      return books;
    } catch (error) {
      throw new Error(`L·ªói t√¨m ki·∫øm theo t√°c gi·∫£: ${error.message}`);
    }
  }

  // T√¨m ki·∫øm s√°ch theo lo·∫°i
  async searchBooksByCategory(tenLoai) {
    try {
      const categories = await bangLoaiSach.find({
        TenLoai: { $regex: tenLoai, $options: "i" },
      });
      console.log("üí° K·∫øt qu·∫£ t√¨m th·ªÉ lo·∫°i:", categories);
      if (categories.length === 0) {
        return [];
      }

      const categoryIds = categories.map((cat) => cat._id);
      const books = await bangSach
        .find({
          MaLoai: { $in: categoryIds },
        })
        .select("-image")
        .populate("TacGia", "TenTG")
        .populate("MaLoai", "TenLoai")
        .limit(10);

      return books;
    } catch (error) {
      throw new Error(`L·ªói t√¨m ki·∫øm theo lo·∫°i: ${error.message}`);
    }
  }

  // L·∫•y th√¥ng tin chi ti·∫øt s√°ch
  async getBookDetails(maSach) {
    try {
      const book = await bangSach
        .findOne({ MaSach: maSach })
        .select("-image")
        .populate("TacGia", "TenTG MoTa")
        .populate("MaLoai", "TenLoai MoTa");

      if (!book) {
        return null;
      }

      const copies = await bangSachCopy
        .find({ MaSach: book._id })
        .populate("MaNXB", "TenNXB DiaChi")
        .populate("MaViTri", "TenViTri MoTa")
        .populate("MaSach");
      return { book, copies };
    } catch (error) {
      throw new Error(`L·ªói l·∫•y th√¥ng tin s√°ch: ${error.message}`);
    }
  }
  // nh√† xu·∫•t b·∫£n
  //   async searchBooksByPublisher(publisherName) {
  //     const publisher = await bangNXB.findOne({
  //       TenNXB: { $regex: new RegExp(publisherName, "i") },
  //     });

  //     if (!publisher) return [];

  //     const books = await bangSachCopy.find({ MaNXB: publisher._id }).populate([
  //       {
  //         path: "MaSach",
  //         populate: [
  //           { path: "TacGia" },
  //           {
  //             path: "MaLoai",
  //           },
  //         ],
  //       },
  //       {
  //         path: "MaNXB",
  //       },
  //       {
  //         path: "MaViTri",
  //       },
  //     ]);
  //     return books;
  //   }
  async searchBooksByPublisher(publisherName) {
    const publisher = await bangNXB.findOne({
      TenNXB: { $regex: new RegExp(publisherName, "i") },
    });

    if (!publisher) return [];

    const copies = await bangSachCopy.find({ MaNXB: publisher._id }).populate([
      {
        path: "MaSach",
        populate: [{ path: "TacGia" }, { path: "MaLoai" }],
      },
      {
        path: "MaNXB",
      },
      {
        path: "MaViTri",
      },
    ]);

    // T·∫°o danh s√°ch ƒë·ªãnh d·∫°ng ƒë·∫πp
    const formattedBooks = copies
      .filter((copy) => copy.MaSach) // ƒë·∫£m b·∫£o s√°ch g·ªëc t·ªìn t·∫°i
      .map((copy) => {
        const book = copy.MaSach;
        const tenTacGia = (book.TacGia || []).map((tg) => tg.TenTG).join(", ");
        const theLoai = (book.MaLoai || []).map((tl) => tl.TenLoai).join(", ");

        return {
          MaSach: book.MaSach,
          TenSach: book.TenSach,
          NamXuatBan: book.NamXuatBan,
          SoLuotMuon: book.SoLuotMuon || 0,
          MoTa: book.MoTa || "Kh√¥ng c√≥ m√¥ t·∫£",
          TacGia: tenTacGia || "Kh√¥ng r√µ",
          TheLoai: theLoai || "Kh√¥ng r√µ",
          TenLoaiBanSao: copy.TenLoaiBanSao,
          NhaXuatBan: copy.MaNXB?.TenNXB || "Kh√¥ng r√µ",
          ViTri: copy.MaViTri?.TenViTri || "Kh√¥ng r√µ",
          SoQuyen: copy.SoQuyen,
        };
      });

    return formattedBooks;
  }

  // Ki·ªÉm tra t√¨nh tr·∫°ng s√°ch
  async checkBookAvailability(maSach) {
    try {
      const book = await bangSach.findOne({ MaSach: maSach }).select("-image");
      if (!book) {
        return null;
      }

      const copies = await bangSachCopy
        .find({ MaSach: book._id })
        .populate("MaSach");
      const totalCopies = copies.reduce((sum, copy) => sum + copy.SoQuyen, 0);
      const borrowedCopies = copies.reduce(
        (sum, copy) => sum + copy.SoLuongDaMuon,
        0
      );
      const availableCopies = totalCopies - borrowedCopies;

      return {
        book,
        totalCopies,
        borrowedCopies,
        availableCopies,
        isAvailable: availableCopies > 0,
      };
    } catch (error) {
      throw new Error(`L·ªói ki·ªÉm tra t√¨nh tr·∫°ng s√°ch: ${error.message}`);
    }
  }

  // L·∫•y danh s√°ch s√°ch ph·ªï bi·∫øn
  async getPopularBooks(limit = 10) {
    try {
      const books = await bangSach
        .find()
        .select("-image")
        .sort({ SoLuotMuon: -1 })
        .limit(limit)
        .populate("TacGia", "TenTG")
        .populate("MaLoai", "TenLoai");

      return books;
    } catch (error) {
      throw new Error(`L·ªói l·∫•y s√°ch ph·ªï bi·∫øn: ${error.message}`);
    }
  }

  // L·∫•y th·ªëng k√™ th∆∞ vi·ªán
  async getLibraryStats() {
    try {
      const totalBooks = await bangSach.countDocuments();
      const totalAuthors = await bangTacGia.countDocuments();
      const totalCategories = await bangLoaiSach.countDocuments();
      const totalPublishers = await bangNXB.countDocuments();
      const totalCopies = await bangSachCopy.aggregate([
        { $group: { _id: null, total: { $sum: "$SoQuyen" } } },
      ]);

      return {
        totalBooks,
        totalAuthors,
        totalCategories,
        totalPublishers,
        totalCopies: totalCopies[0]?.total || 0,
      };
    } catch (error) {
      throw new Error(`L·ªói l·∫•y th·ªëng k√™: ${error.message}`);
    }
  }
}

module.exports = new QueryService();
